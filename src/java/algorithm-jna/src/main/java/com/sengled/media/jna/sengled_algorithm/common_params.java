package com.sengled.media.jna.sengled_algorithm;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sengled_algorithm.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class common_params extends Structure {
	/** C type : char[1024] */
	public byte[] token = new byte[1024];
	/** C type : log_callback_callback* */
	public common_params.log_callback_callback log_callback;
	/** <i>native declaration : sengled_algorithm.h</i> */
	public interface log_callback_callback extends Callback {
		void apply(int level, Pointer message);
	};
	public common_params() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("token", "log_callback");
	}
	/**
	 * @param token C type : char[1024]<br>
	 * @param log_callback C type : log_callback_callback*
	 */
	public common_params(byte token[], common_params.log_callback_callback log_callback) {
		super();
		if ((token.length != this.token.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.token = token;
		this.log_callback = log_callback;
	}
	public common_params(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends common_params implements Structure.ByReference {
		
	};
	public static class ByValue extends common_params implements Structure.ByValue {
		
	};
}
